import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve, least_squares, minimize
from helper.opinion_dynamics import DGModel

# --- Simulation settings ---
np.random.seed(42)
np.set_printoptions(precision=4, suppress=True)
num_samples = 1
d = 5  # Dimension of p and x
A = np.array([[0.15, 0.15, 0.1, 0.2, 0.4],[0, 0.55, 0, 0, 0.45],[0.3, 0.05, 0.05, 0, 0.6],[0, 0.4, 0.1, 0.5, 0],[0, 0.3, 0, 0, 0.7]])
x_0 = np.random.uniform(-1, 1, d)
gamma_p = np.random.uniform(0.01, 0.5, d)
sim = DGModel(N=d, gamma=gamma_p, A=A, x_0=x_0)
theta = np.random.normal(0.25, 0.1, d)

# Generate random article positions (shape: num_samples x d)
P = np.random.uniform(low=-1, high=1, size=(num_samples, d))

def clicking_function(p, opinions, beta_true):
    return np.exp(-beta_true * (opinions - p)**2)

def clicking_function2(p, opinions):
    return np.ones_like(p) - 0.25*(opinions - p)**2

CTR_obs = np.zeros((num_samples, d))  # Observed CTRs
X = np.zeros((num_samples, d))
true_sensitivity = np.zeros((num_samples, d, d))

# Compute true x = Wp and CTRs
for i in range(num_samples):
    for j in range(20):
        sim.update(P[i])

    number_of_clicks = np.zeros(d)
    for j in range(40):
        x = sim.update(P[i])
        number_of_clicks += (np.random.rand(d) < clicking_function2(P[i], x)).astype(int)

    #CTR_obs[i] = number_of_clicks / 40  # Average CTR over 40 trials
    CTR_obs[i] = clicking_function2(P[i], sim.get_opinion())  # Average CTR over 40 trials

    X[i] = sim.get_sensitivity() @ P[i]
    true_sensitivity[i] = sim.get_G(P[i], theta=0.25*np.ones(d)) #sim.get_G(P[i], theta = theta)

delta_p = np.zeros(d)
delta_CR = np.zeros((d, d))

for i in range(d):
    P_dash = P[-1].copy()
    P_dash[i] = P_dash[i] - 0.5 if P_dash[i] + 0.5 > 1 else P_dash[i] + 0.5
    delta_p[i] = P_dash[i] - P[-1][i]
    X_dash = sim.get_sensitivity() @ P_dash
    CR_dash = clicking_function2(P_dash, X_dash)
    delta_CR[i] = CR_dash - CTR_obs[-1]

def equations(vars, G, d):
    n_G = G.shape[0]  # number of G matrices
    y = vars[0 : n_G * d]
    S = vars[n_G * d :].reshape((d, d), order='F')

    eq = []

    for i in range(d):
        
        for g in range(n_G):
            eq.append(-y[g * d + i] + y[g * d + i] * S[i][i] - G[g][i][i])  # diagonal terms

        for j in range(d):
            if i != j:
                for g in range(n_G):
                    eq.append(y[g * d + i] * S[i][j] - G[g][i][j])  # off-diagonal terms

        eq.append(np.sum(S[i, :]) - 1)  # row sum of S equals 1
        
    return eq


def equations_with_y_estim(vars, G, delta_CR, delta_p, d):
    n_G = G.shape[0]  # number of G matrices
    y = vars[0 : n_G * d]
    S = vars[n_G * d :].reshape((d, d), order='F')

    eq = []

    for i in range(d):
        
        for g in range(n_G):
            eq.append(-y[g * d + i] + y[g * d + i] * S[i][i] - G[g][i][i])  # diagonal terms

        for j in range(d):
            if i != j:
                for g in range(n_G):
                    eq.append(y[g * d + i] * S[i][j] - G[g][i][j])  # off-diagonal terms

        for j in range(d):
            if i != j:
                eq.append(S[j][i] * y[(n_G - 1) * d + j] + delta_CR[i][j] / delta_p[i])  # y estimation

        eq.append(np.sum(S[i, :]) - 1)  # row sum of S equals 1
        
    return eq

def objective(vars, G, delta_CR, delta_p, d):
    return np.sum(np.abs(np.array(equations(vars, G, d))))
    #return np.sum(np.abs(np.array(equations_with_y_estim(vars, G, delta_CR, delta_p, d))))

def constraint1(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[1][1] - S[2][1]
def constraint2(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[1][1] - S[3][1]
def constraint3(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[1][1] - S[4][1]
def constraint4(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[1][1] - S[0][1]
def constraint5(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[4][4] - S[0][4]
def constraint6(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[4][4] - S[1][4]
def constraint7(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[4][4] - S[2][4]
def constraint8(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[4][4] - S[3][4]
def constraint9(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[0][0] - S[1][0]
def constraint10(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[0][0] - S[2][0]
def constraint11(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[0][0] - S[3][0]
def constraint12(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[0][0] - S[4][0]
def constraint13(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[2][2] - S[0][2]
def constraint14(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[2][2] - S[1][2]
def constraint15(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[2][2] - S[3][2]
def constraint16(vars):
    S = vars[num_samples * 5 :].reshape((d, d), order='F')
    return S[2][2] - S[4][2]

cons = [{'type': 'ineq', 'fun': constraint1},
        {'type': 'ineq', 'fun': constraint2},
        {'type': 'ineq', 'fun': constraint3},
        {'type': 'ineq', 'fun': constraint4},
        {'type': 'ineq', 'fun': constraint5},
        {'type': 'ineq', 'fun': constraint6},
        {'type': 'ineq', 'fun': constraint7},
        {'type': 'ineq', 'fun': constraint8},
        {'type': 'ineq', 'fun': constraint9},
        {'type': 'ineq', 'fun': constraint10},
        {'type': 'ineq', 'fun': constraint11},
        {'type': 'ineq', 'fun': constraint12},
        {'type': 'ineq', 'fun': constraint13},
        {'type': 'ineq', 'fun': constraint14},
        {'type': 'ineq', 'fun': constraint15},
        {'type': 'ineq', 'fun': constraint16}]

num_vars = 2 * num_samples * d + d**2
lower_bound = np.concatenate((-np.inf * np.ones(num_samples * d), np.zeros(d**2)))
upper_bound = np.concatenate((np.inf * np.ones(num_samples * d), np.ones(d**2)))
initial_guess = np.concatenate((np.zeros(num_samples * d), 0.5 * np.ones(d**2)))


result = minimize(
    objective,
    initial_guess,
    bounds=list(zip(lower_bound, upper_bound)),
    method='SLSQP',
    constraints=cons,
    args=(true_sensitivity, delta_CR, delta_p, d),
    options={'disp': True, 'maxiter': 1000}
)
"""

result = least_squares(
    equations,
    initial_guess,
    ftol=1e-12,
    xtol=1e-12,
    gtol=1e-14,
    bounds=[lower_bound, upper_bound],
    args=(true_sensitivity, d),
)

"""

# Print results
print("Success:", result.success)
print("Message:", result.message)

y_true = np.zeros((num_samples, d))

for g in range(num_samples):
    y_true[g] = -0.5 * (P[g] - X[g])
    print(f"True y[{g}]:", y_true[g])
    print(f"Estimated y[{g}]:", result.x[g*d : (g+1)*d])

S_estimated = result.x[num_samples * d:].reshape((d, d), order='F')
print("True sensitivity matrix:\n", sim.get_sensitivity())
print("Estimated sensitivity matrix:\n", S_estimated)
print("True col sum:", np.sum(sim.get_sensitivity(), axis=0))
print("Estimated col sum:", np.sum(S_estimated, axis=0))

#print(result.fun)

#print("Max error true equations:", np.abs(np.array(equations_with_y_estim(np.concatenate((y_true.flatten(), sim.get_sensitivity().flatten(order='F'))), true_sensitivity, delta_CR, delta_p, d))))
#print("Estimated equations:", np.array(equations(result.x, true_sensitivity, d)))

print(delta_CR)
"""
for i in range(1, d):
    print(y_true[-1][i], -delta_CR[0][i] / (sim.get_sensitivity()[i][0]*delta_p[0]))

for i in [0, 2, 3, 4]:
    print(y_true[-1][i], -delta_CR[1][i] / (sim.get_sensitivity()[i][1]*delta_p[1]))

for i in [0, 1, 3, 4]:
    print(y_true[-1][i], -delta_CR[2][i] / (sim.get_sensitivity()[i][2]*delta_p[2]))

for i in [0, 1, 2, 4]:
    print(y_true[-1][i], -delta_CR[3][i] / (sim.get_sensitivity()[i][3]*delta_p[3]))

for i in range(d-1):
    print(y_true[-1][i], -delta_CR[4][i] / (sim.get_sensitivity()[i][4]*delta_p[4]))
"""